0：参考
http://blog.csdn.net/kongxx/article/details/7288896
http://blog.csdn.net/zapldy/article/details/5850440

一：发送 （客户端的处理）
SocketChannel socketChannel = SocketChannel.open();
SocketAddress socketAddress = new InetSocketAddress("localhost", 10000);
socketChannel.connect(socketAddress);
byte[] bytes = SerializableUtil.toBytes(myRequestObject);//对象转为字节
ByteBuffer buffer = ByteBuffer.wrap(bytes);
socketChannel.write(buffer);
socketChannel.socket().shutdownOutput();
socketChannel.close();

二 ：接受   （服务端的处理）
// Selector for incoming time requests
Selector selector = Selector.open();

// Create a new server socket and set to non blocking mode
ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
serverSocketChannel.configureBlocking(false);

// Bind the server socket to the local host and port
serverSocketChannel.socket().setReuseAddress(true);
serverSocketChannel.socket().bind(new InetSocketAddress(10000));

serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);

while (selector.select() > 0) {
	// Someone is ready for I/O, get the ready keys
	Iterator<SelectionKey> it = selector.selectedKeys().iterator();

	// Walk through the ready keys collection and process date requests.
	while (it.hasNext()) {
		SelectionKey readyKey = it.next();
		it.remove();
		
		// The key indexes into the selector so you
		// can retrieve the socket that's ready for I/O
		execute((ServerSocketChannel) readyKey.channel());
	}
}

//execute中的
SocketChannel socketChannel = serverSocketChannel.accept();

//while{socketChannel-->buffer--->bytes-->ByteArrayOutputStream}-->bytes-->obj
private static MyRequestObject receiveData(SocketChannel socketChannel) throws IOException {
	MyRequestObject myRequestObject = null;
	ByteArrayOutputStream baos = new ByteArrayOutputStream();
	ByteBuffer buffer = ByteBuffer.allocate(1024);
	
	try {
		byte[] bytes;
		int size = 0;
		while ((size = socketChannel.read(buffer)) >= 0) {
			buffer.flip();
			bytes = new byte[size];
			buffer.get(bytes);
			baos.write(bytes);
			buffer.clear();
		}
		bytes = baos.toByteArray();
		Object obj = SerializableUtil.toObject(bytes);
		myRequestObject = (MyRequestObject)obj;
	} finally {
		try {
			baos.close();
		} catch(Exception ex) {}
	}
	return myRequestObject;
}

